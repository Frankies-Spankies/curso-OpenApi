openapi: '3.0.2'
info:
  title: First API
  version: '1.0'
  description:  Primer Api en OpenAPI
  termsOfService: http://example.com/terms/
  contact:
    name: Franki Panki
    url: http:frankipanki.com
    email: franki@McsPanki.com
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server

paths:
  /v1/customers:
    get:
      summary: List customers
      description: Get a list of customers in the system.
      tags:
        - Customers
      operationId: listCustomersV1
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
    post:
      summary: New Customer
      description: Create a new customer.
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        '201':
          description: Customer Created
          headers:
            Location:
              description: Location of the created customer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/customers/{assignedIdValue}
        
      deprecated: false


  /v1/customers/{customerId}:
    get:
      summary: Get Customer By Id
      #Acepta markdown, p.e bolding in customer
      description: Get a single **Customer** by Id value.
      tags:
        - Customers
      operationId: getCustomerByIdV1
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

    put:
      summary: Update Customer
      description: Update a customer
      tags:
        - Customers
      responses:
        '200':
          description: hola

  /v1/beers:
    get:
      summary: List Of Beers
      description: List all beers in the system.
      tags:
        - Beers
      operationId: listBeersV1
      parameters:
        - name: beerId
          in: path
          description: Beer Id
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: Found Beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"

    post:
      summary: Create Beer
      description: Create a new beer.
      tags:
        - Beers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Beer"
      responses:
        '201':
          description: Beer Created
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: http://example.com/v1/beers/{assignedIdValue}


  /v1/beers/{beerId}:
    get:
      summary: Get Beer By id
      description: Get a single beer by Its ID value.
      tags:
        - Beers
      operationId: getBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"
        '404':
            description: Not Beers found  

#Components
components:

  parameters:
    $ref: "./parameters/parameters.yaml#/parameters"


  schemas:
    $ref: "./schemas/schemas.yaml#/schemas"