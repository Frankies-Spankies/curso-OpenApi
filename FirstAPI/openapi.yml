openapi: '3.0.2'
info:
  title: First API
  version: '1.0'
  description:  Primer Api en OpenAPI
  termsOfService: http://example.com/terms/
  contact:
    name: Franki Panki
    url: http:frankipanki.com
    email: franki@McsPanki.com
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server

paths:
  /v1/customers:
    get:
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"

  /v1/customers/{customerId}:
    get:
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

  /v1/beers:
    get:
      parameters:
        - name: beerId
          in: path
          description: Beer Id
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: Found Beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"

  /v1/beers/{beerId}:
    get:
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        '404':
            description: Not Beers found  

#Components
components:

  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      schema: 
        type: integer
        format: int64
        default: 1

    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int64
        default: 25    

  schemas:
    #Pages List
    BeerPagedList:
      type: object
      #Simplemente se injecta el schema, no va en properties
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"

    CustomerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content: 
          $ref:  "#/components/schemas/CostumerList"

    #Lists
    BeerList:
      type: array
      description: Beer object
      items:
        $ref: "#/components/schemas/Beer"

    CostumerList:
      type: array
      minItems: 1
      maxItems: 100
      description: customer object
      items:
        $ref: "#/components/schemas/Customer"

    #Objects
    Adress:
      type: object
      properties:
        line1:
          type: string
          example: Avenida siempre viva
        city:
          type: string
          example: Springfield
        zipCode:
          type: string
          example: 9020010
        stateCode:
          type: string
          minLength: 2
          maxLength: 0
          description: Codigo de estado 2 letras
          # enum: [AL,AK,CA,AZ,AR]
          enum:
            - AL
            - AK
            - CA
            - AZ
            - AR

    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 2
          maxLength: 200
          example: frank
        lastName:
          type: string
          minLength: 2
          maxLength: 200
          example: spanki
        adress:
          $ref: "#/components/schemas/Adress" 

    Brewery:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: HEINEKEN
        location:
          type: string
          minLength: 2
          maxLength: 100
          example: Mexico        

    Beer:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 200
          example: XXLagger
        style:
          type: string
          minLength: 2
          maxLength: 8
          enum:
            - LAGGER
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
        price:
          type: number
          format: float
          minimum: 0 
        quantityOnHand: 
          type: integer
          format: int64
          minimum: 0     
        upc:
          type: number
          format: upc
        brewery:
          $ref: "#/components/schemas/Brewery"

    #Pages Response
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
          
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean

